@page "/database-management"
@using Microsoft.EntityFrameworkCore
@using ForFIll.Models
@using ForFIll.Data
@using MudBlazor
@inject ApplicationDbContext DbContext
@rendermode InteractiveServer
@inject ProductService ProductService
@inject ISnackbar Snackbar
@inject AppState AppState
@inject NavigationManager Navigation


@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@* @attribute [Authorize(Policy = "admin")] *@


<h3>
    Database Management System

</h3>




@if (message != null)
{
    <MudText Typo="Typo.body1">@message</MudText>

}
@if (databases == null)
{
    <p><em>No databases found.</em></p>
}
else if (!databases.Any())
{
    <p>No databases found.</p>
}
else
{
    <ul>
        @foreach (var db in databases)
        {
            <h2>Your Database : @db </h2>
        }
    </ul>
}

<MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mx-2" OnClick="ApplyMigrations">
    Apply Creation
    @if (loadding == true)
    {
        <MudProgressCircular Class="mx-2" Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
    }
</MudButton>
@if (message != null || databases != null)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToLSignup">Register
        @if (loaddingR == true)
        {
            <MudProgressCircular Class="mx-2" Color="Color.Dark" Size="Size.Small" Indeterminate="true" />
        }
    </MudButton>
}


<MudSpacer />

@code {
    private string message;
    CreateDatabase DataBaseName = new CreateDatabase();
    bool Visiable;
    private bool loadding;
    private bool loaddingR;
    private async Task CreateDatabase()
    {
        try
        {
            // Ensure the database is created
            await DbContext.Database.EnsureCreatedAsync();
            message = "Database created successfully.";
        }
        catch (Exception ex)
        {
            message = $"Error creating database: {ex.Message}";
        }
    }

    private async Task ApplyMigrations()
    {

        try
        {
            loadding = true;

            // Apply pending migrations
            await DbContext.Database.MigrateAsync();
            message = "Migrations applied successfully.";
            databases = await ProductService.GetAllDatabasesAsync();

            loadding = false;
        }
        catch (Exception ex)
        {
            message = $"Error applying migrations: {ex.Message}";
        }
    }

    //start get all DataBases
    private List<string> databases;

    protected override async Task OnInitializedAsync()
    {
        databases = await ProductService.GetAllDatabasesAsync();
    }
    //End get all DataBases

    private async void OnValidSubmit(EditContext context)
    {
        try
        {
            ApplyMigrations();
            Snackbar.Add("Add Database done successfully", Severity.Success);
            DataBaseName = new CreateDatabase();// Resets the form
            databases = await ProductService.GetAllDatabasesAsync();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message + "and Check Connection String", Severity.Error);

        }
    }
    private void NavigateToLSignup()
    {
        loaddingR = true;
        Navigation.NavigateTo("/signup");

    }
}
