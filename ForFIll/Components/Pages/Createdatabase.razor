@page "/database-management"
@using Microsoft.EntityFrameworkCore
@using ForFIll.Models
@using ForFIll.Data
@using MudBlazor
@inject ApplicationDbContext DbContext
@rendermode InteractiveServer
@inject ProductService ProductService
@inject ISnackbar Snackbar


<h3>Database Management</h3>

@* <div>
    <MudTextField Label="First name" HelperText="Max. 8 characters" @bind-Value="DataBaseName.DatabaseName" For="@(() => DataBaseName.DatabaseName)" />
     <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateDatabase">Create Database</MudButton> 
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ApplyMigrations">Apply Migrations</MudButton>
</div> *@

<EditForm Model="@DataBaseName" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                                  @bind-Value="DataBaseName.DatabaseName" For="@(() => DataBaseName.DatabaseName)" />
                </MudCardContent>
                <MudCardActions>

                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Apply Migrations</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
@DataBaseName.DatabaseName

@if (message != null)
{
    <MudText Typo="Typo.body1">@message</MudText>
}
@if (databases == null)
{
    <p><em>Loading...</em></p>
}
else if (!databases.Any())
{
    <p>No databases found.</p>
}
else
{
    <ul>
        @foreach (var db in databases)
        {
            @* <li>Database Name : @db </li> *@

            <select name="db" id="cars">
                <option value="volvo">@db</option>
            </select>
        }
    </ul>
}
@code {
    private string message;
    CreateDatabase DataBaseName = new CreateDatabase();

    private async Task CreateDatabase()
    {
        try
        {
            // Ensure the database is created
            await DbContext.Database.EnsureCreatedAsync();
            message = "Database created successfully.";
        }
        catch (Exception ex)
        {
            message = $"Error creating database: {ex.Message}";
        }
    }

    private async Task ApplyMigrations()
    {
        try
        {
            // Apply pending migrations
            await DbContext.Database.MigrateAsync();
            message = "Migrations applied successfully.";
        }
        catch (Exception ex)
        {
            message = $"Error applying migrations: {ex.Message}";
        }
    }

    //start get all DataBases
    private List<string> databases;

    protected override async Task OnInitializedAsync()
    {
        databases = await ProductService.GetAllDatabasesAsync();
    }
    //End get all DataBases

    private async void OnValidSubmit(EditContext context)
    {

        try
        {


            // var userList = DataBaseName;

            // var request = await ProductService.CreateUserAsync(userList);
            // if (request.Success == false)
            // {
            //     Snackbar.Add(request.Message, Severity.Error);
            //     return;
            // }
            ApplyMigrations();
            Snackbar.Add("Add Database done successfully", Severity.Success);
            DataBaseName = new CreateDatabase();// Resets the form
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);

        }
    }

}
