@page "/Loginform"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using ForFIll.Models
@using MudBlazor
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject ISnackbar Snackbar
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@using ForFIll.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc;
@using ForFIll.Controllers
@inject ProductService ProductService
@using ForFIll.Data
@using ForFIll.Components.Pages
@using System.Net.Http.Json
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject ProductService _productser



<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudPaper Height="400px" Width="100%">
    <MudContainer MaxWidth="MaxWidth.Small">

        <h3>Loginform</h3>
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="loginForm">
            <AntiforgeryRequestToken />
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudTextField T="string" @bind-Value="loginModel.Username" Label="Username or Email" Required="true" />
            <MudTextField T="string" @bind-Value="loginModel.Password" Label="Password" InputType="@(ShowPassword ? InputType.Text : InputType.Password)" Required="true" />
            <MudCheckBox @bind-Value="ShowPassword">Show Password</MudCheckBox>

            <MudSpacer />
            <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
            <MudButton OnClick="NavigateToLSignup" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
        </EditForm>

    </MudContainer>
</MudPaper>



@code {
    public LoginModel loginModel = new LoginModel();
    public IEnumerable<User> User = new List<User>();
    public bool ShowPassword { get; set; } = false;
    public string UserClaim { get; set; } 

    protected override async Task OnInitializedAsync()
    {

        //start accsess
        // var claims = new List<Claim>
        // {
        //     new Claim(ClaimTypes.Name, "John Doe"),
        //     new Claim(ClaimTypes.Email, "john.doe@example.com"),
        //     new Claim(ClaimTypes.Role, "Admin"),
        //     new Claim("CanEditProduct", "true"),
        //     new Claim("CanDeleteProduct", "false"),
        //     new Claim("Department", "Sales"),
        //     new Claim("SubscriptionLevel", "Premium")
        // };

        // var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        // var principal = new ClaimsPrincipal(identity);   
        // await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);

        //Conclusion
        //    The specific list of claims you need depends on the functionality of your application and the way you want to enforce permissions. At the core, claims like Name, Email, Role, and custom permissions(e.g., CanEditProduct, CanManageUsers) are commonly used to define user access rights and behaviors within an application.
        // end accesse

        try
        {
            var request = await ProductService.GetUsers();

            if (request.Success)
            {
                User = request.Data!;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
    private async Task HandleLogin()
    {
        try
        {

          

            var request = User.Where(x => x.Username == loginModel.Username || x.Email == loginModel.Username).FirstOrDefault();
            if (request != null)
            {
                var hashpassword = _productser.VerifyPassword(request, request.Password, loginModel.Password);
                if ((request.Username == loginModel.Username || request.Email == loginModel.Username) && hashpassword)
                {
                    if (request.Username == "admin") loginModel.Username = "admin";
                     UserClaim = request.Token;

                    Snackbar.Add("Login Done Successflly", Severity.Success);

                    // Navigation.NavigateTo($"/login/{loginModel.Username}");
                    Navigation.NavigateTo($"/login/{Uri.EscapeDataString(loginModel.Username)}/{Uri.EscapeDataString(UserClaim)}");


                }
                else Snackbar.Add("Username or password not valid", Severity.Warning);
            }
            else Snackbar.Add("Username or password not valid", Severity.Warning);

            
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add("Soem issue Just Happend ! , pLease Try again Later", Severity.Warning);
        }
    }
    private void NavigateToLSignup()
    {
        Navigation.NavigateTo("/signup");

    }
}
