@page "/fetchdata"


@using MudBlazor
@using ForFIll.Models;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using ForFIll.Data
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@using ForFIll.Controllers
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@using System.Text.RegularExpressions
@inject ProductService ProductService
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization

<MudDialogProvider />
<MudSnackbarProvider/>

<h3>Data</h3>
<h3>fetchdata now</h3>
<h3>fetchdata two</h3>



@* start add prodcut  *@
<div class="d-flex">
    <MudButton Variant="Variant.Filled" @onclick="OpenDialog" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">Add Product</MudButton>
</div>

<MudDialog @bind-Visible="_visible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon  Class="mr-3" /> Add Product
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudForm @ref="form" @bind-IsValid="@successShow" @bind-Errors="@errors">
                        <MudTextField T="string" Label="Name" @bind-Value="Name" Required="true" RequiredError="Name name is required!" />
                        <MudTextField T="decimal" Label="Price" @bind-Value="Price" Required="true" RequiredError="Price name is required!" />
                        <MudTextField T="string" Label="Category" @bind-Value="Category" Required="true" RequiredError="Category name is required!" />

                        <div class="d-flex align-center justify-space-between">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddProduct" Disabled="@(!successShow)" Class="ml-auto">Add Product</MudButton>
                        </div>
                    </MudForm>
                </MudPaper>
            </MudItem>

        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Surface" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="px-10">Close</MudButton>   
    </DialogActions>
</MudDialog>
@* end add prodcut  *@


@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@filteredProducts"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              Loading="@_loading"
              LoadingProgressColor="Color.Info"
              EditTrigger="@TableEditTrigger.EditButton"
              ReadOnly="false"
              Striped="true">
        <ToolBarContent>
            <MudTextField T="string" Label="Search" @bind-Value="searchString" TextChanged="FilterProducts" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Product Name</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>

                <MudTd DataLabel="Id">@context.Id</MudTd>
            @if(_readOnly == true){

                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                <MudTd DataLabel="Category">@context.Category</MudTd>
          }else{
                <MudTd><MudTextField T="string" Label="Name" @bind-Value="context.Name" Required="true" RequiredError="Name is required!" /></MudTd>
                <MudTd><MudTextField T="decimal" Label="Price" @bind-Value="context.Price" Required="true" RequiredError="Price is required!" /></MudTd>
                <MudTd><MudTextField T="string" Label="Category" @bind-Value="context.Category" Required="true" RequiredError="Category is required!" /></MudTd>
          }
            <MudTd DataLabel="Actions">
                @if (_readOnly == true)
                {
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => show())" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => SureDialog(context.Id))" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
                
                }
                @if(_readOnly == false){
                    <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="@(() => EditProduct(context.Id,context.Name,context.Price,context.Category , context.IsDeleted))" Class="mx-2" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(() => Close())" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
                }
            </MudTd>
 
        </RowTemplate>
    </MudTable>

    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
    </MudScrollToTop>
}


@code {
    //create new product
    public string Name { get; set; }
    public decimal Price { get; set; }
    public string Category { get; set; }
    public bool IsDeleted { get; set; }
    //update product
    public string NameUpdate { get; set; }
    public decimal PriceUpdate { get; set; }
    public string CategoryUpdate { get; set; }
    public bool IsDeletedUpdate { get; set; }

    public bool resultAdd { get; set; } = false;
    private string searchString = "";
    private bool _readOnly = true;
    private bool _loading;

    private bool showInnerComponent = false;
    private bool showInnerComponentDone = false;
    Product createProduct = new Product();
    bool successShow;
    public IEnumerable<Product> products = new List<Product>();

    public IEnumerable<Product> filteredProducts = new List<Product>();
    private readonly ApplicationDbContext _context;
    public void show() => _readOnly = false;
    public void Close() => _readOnly = true;
    private void OpenDialogDone() => showInnerComponentDone = true;
    private void CancelDone() => showInnerComponentDone = false;


    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    protected override async Task OnInitializedAsync()
    {

        try
        {
            var request = await ProductService.GetProductsApi();
            if (request.Success)
            {
                products = request.Data!;
                filteredProducts = products;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private async Task deleteData(int id)
    {
        try
        {

            var request = await ProductService.DeleteProductAsyncsql(id);
            if (request.Success)
            {

                var requestrefresh = await ProductService.GetProductsApi();
                if (request.Success)
                {
                    products = requestrefresh.Data!;
                    filteredProducts = products;
                    StateHasChanged();
                    Snackbar.Add("Delete Product with Id :"+id+" Done successfully ", Severity.Success);

                }
            }
            else
            {
                Snackbar.Add(request.Message, Severity.Error);
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    /// <summary> add prodcut
    private async Task EditProduct(int id, string Name, decimal price, string Category, bool IsDeleted)
    {

        createProduct.Name = Name;
        createProduct.Price = price;
        createProduct.Category = Category;
        createProduct.IsDeleted = IsDeleted;

        var product = createProduct;
        _readOnly = false;

        var response = await ProductService.UpdateProductAsync(id, product);
        var requestRefresh = await ProductService.GetProductsApi();

        if (response.Success)
        {

            products = requestRefresh.Data!;
            filteredProducts = products;
                    Snackbar.Add("Modify Product with Id :"+id+" Done successfully ", Severity.Success);

            StateHasChanged();
            FilterProducts();
            Close();
        }
        else
        {
            Snackbar.Add("Update  Not Done", Severity.Error);
        }

    }

    private async Task AddProduct()
    {
        success = true;
        var product = createProduct;
        createProduct.Name = Name;
        createProduct.Price = Price;
        createProduct.Category = Category;
        createProduct.IsDeleted = IsDeleted;
        var request = await ProductService.CreateProductAsync(product);
        var requestRefresh = await ProductService.GetProductsApi();

        if (request.Success)
        {
            products.Append(product);
            products = requestRefresh.Data!;
            filteredProducts = products;
            StateHasChanged();
            Snackbar.Add("Add Product Done successfully ", Severity.Success);
            showLeaveAlert = true;
            form.ResetAsync();
        }
        else
        {
            Snackbar.Add("Add Not Done", Severity.Error);
        }
    }
    private void FilterProducts()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products.Where(p => p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || p.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();


        }
    }
    //start form
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

   
    //end form
    /// </summary>

    //start Delete Dialog 

    string state = "Message box hasn't been opened yet";

    private async void SureDialog(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are You Sure You Want To Delete This Prodcut !",
            yesText: "Delete!", cancelText: "Cancel");
            
        state = result == null ? "Canceled" : "Deleted!";
        if (state == "Deleted!") deleteData(id);
        StateHasChanged();
    }


    //End Delete Dialog 
    //start Add Product Dialog 
    private bool _visible;
    
    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };

    private void OpenDialog() => _visible = true;

    private void Submit() => _visible = false;
    //End Add Product Dialog 

    private bool showCallAlert = true;
    private bool showLeaveAlert = false;
    private void CloseMe(bool value)
    {
        if (value)
        {
            showLeaveAlert = false;
        }
        else
        {
            showCallAlert = false;
        }
    }
}
