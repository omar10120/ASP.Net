@page "/signup"

@using MudBlazor
@using ForFIll.Models;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using ForFIll.Data
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@using ForFIll.Controllers
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@using System.Text.RegularExpressions
@inject ProductService ProductService
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization


<MudDialogProvider />
<MudSnackbarProvider />

<h3>Signup</h3>

<EditForm Model="@user"   OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                                  @bind-Value="user.Username" For="@(() => user.Username)" />
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="user.Email" For="@(() => user.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="user.Password" For="@(() =>  user.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password confirm " HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="user.Password2" For="@(() => user.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>

                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    User user = new User();
    public IEnumerable<User> UsersList = new List<User>();
    private bool _loading;


       
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = await ProductService.GetUsers();
            if (request.Success)
            {
                UsersList = request.Data!;
            }

        }
        catch (Exception ex)
        {

            Snackbar.Add(ex.Message, Severity.Error);

        }
    }
    bool success;
    private async void OnValidSubmit(EditContext context)
    {
        try
        {
            user.Token = "1";
            success = true;
            var userList = user;

            var request = await ProductService.CreateUserAsync(userList);
            if(request.Success == false)
            {
                Snackbar.Add(request.Message, Severity.Error );
                return;
            }
            Snackbar.Add("Add User done successfully", Severity.Success);
            user = new User();// Resets the form
            
            StateHasChanged();
     


        }
        catch (Exception ex)    
        {
            Snackbar.Add(ex.Message, Severity.Error);

        }
    }

}