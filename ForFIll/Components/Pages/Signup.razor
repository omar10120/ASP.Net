@page "/signup"


@inject IDialogService DialogService
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject ProductService ProductService
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager


@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiceProvider ServiceProvider




<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (UsersList.Count() == 0)
{

    <MudAlert Severity="Severity.Warning">For The First Registering use "admin" as username to get access for all features </MudAlert>
}

<h3>Signup</h3>

<EditForm Model="@user" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                                  @bind-Value="user.Username" For="@(() => user.Username)" />
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="user.Email" For="@(() => user.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="user.Password" For="@(() =>  user.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password confirm " HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="user.Password2" For="@(() => user.Password2)" InputType="InputType.Password" />

                    <MudSelect @bind-Value="user.Token" Label="choose permission" For="@(() => user.Token)" HelperText="Required Faield">
                        <MudSelectItem Value=@("admin")>admin</MudSelectItem>
                        <MudSelectItem Value=@("user")>user</MudSelectItem>
                        <MudSelectItem Value=@("coadmin")>coadmin</MudSelectItem>

                    </MudSelect>

                    @if(user.Token == "coadmin"){

                        <MudCheckBox @bind-Value="user.AllowEdit" Color="Color.Primary">allow user to Edit Product</MudCheckBox>
                        <MudCheckBox @bind-Value="user.AllowAdd" Color="Color.Primary">allow user to Add Product</MudCheckBox>
                        <MudCheckBox @bind-Value="user.AllowEditUser" Color="Color.Primary">Allow user to Display user control page</MudCheckBox>
                    }



                </MudCardContent>
                <MudCardActions>
                    <MudLink Href="Loginform" Underline="Underline.Always" Class="mx-2">Allready Has Account ?</MudLink>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">SignUp</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    User user = new User();
    public IEnumerable<User> UsersList = new List<User>();
    User edituser = new User();
    public bool Basic_CheckBox2 { get; set; } = false;

    private bool _loading;
    bool _readOnly = true;
    public void show() => _readOnly = false;
    public void Close() => _readOnly = true;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = await ProductService.GetUsers();
            if (request.Success) UsersList = request.Data!;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void OnValidSubmit(EditContext context)
    {

     



        try
        {

            // user.Token = "1";


            var userList = user;
            var request = await ProductService.CreateUserAsync(userList);
            if (request.Success == false)
            {
                Snackbar.Add(request.Message, Severity.Error);
                return;
            }


            Snackbar.Add("Add User done successfully", Severity.Success);

            user = new User();// Resets the form


            var requestRefresh = await ProductService.GetUsers();
            if (request.Success) UsersList = requestRefresh.Data!;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);

        }
    }




}