@page "/signup"

@using MudBlazor
@using ForFIll.Models;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using ForFIll.Data
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@using ForFIll.Controllers
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@using System.Text.RegularExpressions
@inject ProductService ProductService
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation


<MudDialogProvider />
<MudSnackbarProvider />

<h3>Signup</h3>

<EditForm Model="@user" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                                  @bind-Value="user.Username" For="@(() => user.Username)" />
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="user.Email" For="@(() => user.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="user.Password" For="@(() =>  user.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password confirm " HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="user.Password2" For="@(() => user.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>


                    <MudLink Href="Loginform" Underline="Underline.Always" Class="mx-2">Allready Has Account ?</MudLink>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>



<MudTable Items="@UsersList" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Username</MudTh>
        <MudTh>password</MudTh>
        <MudTh>Token</MudTh>
        <MudTh>Action</MudTh>

    </HeaderContent>
    <RowTemplate>
        @if (_readOnly == true)
        {

            <MudTd DataLabel="Username">@context.Username</MudTd>
            <MudTd DataLabel="password">@context.Password</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="token">@context.Token</MudTd>
        }
        else
        {
            <MudTd><MudTextField T="string" Label="Username" @bind-Value="context.Username" Required="true" RequiredError="Username is required!" /></MudTd>
            <MudTd><MudTextField T="string" Label="Password" @bind-Value="context.Password" Required="true" RequiredError="Password is required!" /></MudTd>
            <MudTd><MudTextField T="string" Label="Email" @bind-Value="context.Email" Required="true" RequiredError="Email is required!" /></MudTd>
            <MudTd><MudTextField T="string" Label="Token" @bind-Value="context.Token" Required="true" RequiredError="Token is required!" /></MudTd>
        }
        <MudTd DataLabel="Actions">
            @if (_readOnly == true)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => show())" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => SureDialog(context.Id))" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
            }
            @if (_readOnly == false)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="@(() => EditProduct(context.Id,context.Username,context.Password,context.Email))" Class="mx-2" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
                <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(() => Close())" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
            }
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    User user = new User();
    public IEnumerable<User> UsersList = new List<User>();
    User edituser = new User();


    private bool _loading;
    bool _readOnly = true;
    public void show() => _readOnly = false;
    public void Close() => _readOnly = true;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = await ProductService.GetUsers();
            if (request.Success)
            {
                UsersList = request.Data!;

            }

        }
        catch (Exception ex)
        {

            Snackbar.Add(ex.Message, Severity.Error);

        }
    }
    bool success;
    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        try
        {
            user.Token = "1";

            var userList = user;

            var request = await ProductService.CreateUserAsync(userList);
            if (request.Success == false)
            {
                Snackbar.Add(request.Message, Severity.Error);
                return;
            }
            Snackbar.Add("Add User done successfully", Severity.Success);

            user = new User();// Resets the form

            StateHasChanged();



        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);

        }
    }
    private async Task deleteData(int id)
    {
        try
        {

            var request = await ProductService.DeleteFromUserAsync(id);
            if (request.Success)
            {

                var requestrefresh = await ProductService.GetUsers();
                if (request.Success)
                {
                    UsersList = requestrefresh.Data!;
                    StateHasChanged();
                    Snackbar.Add("Delete User with Id :" + id + " Done successfully ", Severity.Success);

                }
            }
            else
            {
                Snackbar.Add(request.Message, Severity.Error);
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    string state = "Message box hasn't been opened yet";

    private async void SureDialog(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are You Sure You Want To Delete This Prodcut !",
            yesText: "Delete!", cancelText: "Cancel");

        state = result == null ? "Canceled" : "Deleted!";
        if (state == "Deleted!") deleteData(id);
        StateHasChanged();
    }


    private async Task EditProduct(int id, string username, string password, string email)
    {

        edituser.Username = username;
        edituser.Password = password;
        edituser.Password2 = password;
        edituser.Email = email;
        edituser.Token = "1";

        var user = edituser;
        _readOnly = false;

        var response = await ProductService.UpdateUserAsync(id, user);
        var requestrefresh = await ProductService.GetUsers();

        if (response.Success)
        {
            UsersList = requestrefresh.Data!;
            Snackbar.Add("Modify Product with Id :" + id + " Done successfully ", Severity.Success);

            StateHasChanged();
            Close();
        }
        else
        {
            Snackbar.Add("Update  Not Done", Severity.Error);
        }

    }

}